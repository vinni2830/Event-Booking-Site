{"ast":null,"code":"import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\nimport { getWillChangeName } from '../../value/use-will-change/get-will-change-name.mjs';\nfunction makeState({\n  applyWillChange = false,\n  scrapeMotionValuesFromProps,\n  createRenderState,\n  onMount\n}, props, context, presenceContext, isStatic) {\n  const state = {\n    latestValues: makeLatestValues(props, context, presenceContext, isStatic ? false : applyWillChange, scrapeMotionValuesFromProps),\n    renderState: createRenderState()\n  };\n  if (onMount) {\n    state.mount = instance => onMount(props, instance, state);\n  }\n  return state;\n}\nconst makeUseVisualState = config => (props, isStatic) => {\n  const context = useContext(MotionContext);\n  const presenceContext = useContext(PresenceContext);\n  const make = () => makeState(config, props, context, presenceContext, isStatic);\n  return isStatic ? make() : useConstant(make);\n};\nfunction forEachDefinition(props, definition, callback) {\n  const list = Array.isArray(definition) ? definition : [definition];\n  for (let i = 0; i < list.length; i++) {\n    const resolved = resolveVariantFromProps(props, list[i]);\n    if (resolved) {\n      const {\n        transitionEnd,\n        transition,\n        ...target\n      } = resolved;\n      callback(target, transitionEnd);\n    }\n  }\n}\nfunction makeLatestValues(props, context, presenceContext, shouldApplyWillChange, scrapeMotionValues) {\n  var _a;\n  const values = {};\n  const willChange = new Set();\n  const applyWillChange = shouldApplyWillChange && ((_a = props.style) === null || _a === void 0 ? void 0 : _a.willChange) === undefined;\n  const motionValues = scrapeMotionValues(props, {});\n  for (const key in motionValues) {\n    values[key] = resolveMotionValue(motionValues[key]);\n  }\n  let {\n    initial,\n    animate\n  } = props;\n  const isControllingVariants$1 = isControllingVariants(props);\n  const isVariantNode$1 = isVariantNode(props);\n  if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {\n    if (initial === undefined) initial = context.initial;\n    if (animate === undefined) animate = context.animate;\n  }\n  let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;\n  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n  const variantToSet = isInitialAnimationBlocked ? animate : initial;\n  if (variantToSet && typeof variantToSet !== \"boolean\" && !isAnimationControls(variantToSet)) {\n    forEachDefinition(props, variantToSet, (target, transitionEnd) => {\n      for (const key in target) {\n        let valueTarget = target[key];\n        if (Array.isArray(valueTarget)) {\n          /**\n           * Take final keyframe if the initial animation is blocked because\n           * we want to initialise at the end of that blocked animation.\n           */\n          const index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;\n          valueTarget = valueTarget[index];\n        }\n        if (valueTarget !== null) {\n          values[key] = valueTarget;\n        }\n      }\n      for (const key in transitionEnd) {\n        values[key] = transitionEnd[key];\n      }\n    });\n  }\n  // Add animating values to will-change\n  if (applyWillChange) {\n    if (animate && initial !== false && !isAnimationControls(animate)) {\n      forEachDefinition(props, animate, target => {\n        for (const name in target) {\n          const memberName = getWillChangeName(name);\n          if (memberName) {\n            willChange.add(memberName);\n          }\n        }\n      });\n    }\n    if (willChange.size) {\n      values.willChange = Array.from(willChange).join(\",\");\n    }\n  }\n  return values;\n}\nexport { makeUseVisualState };","map":{"version":3,"names":["useContext","isAnimationControls","PresenceContext","resolveVariantFromProps","useConstant","resolveMotionValue","MotionContext","isControllingVariants","isVariantNode","getWillChangeName","makeState","applyWillChange","scrapeMotionValuesFromProps","createRenderState","onMount","props","context","presenceContext","isStatic","state","latestValues","makeLatestValues","renderState","mount","instance","makeUseVisualState","config","make","forEachDefinition","definition","callback","list","Array","isArray","i","length","resolved","transitionEnd","transition","target","shouldApplyWillChange","scrapeMotionValues","_a","values","willChange","Set","style","undefined","motionValues","key","initial","animate","isControllingVariants$1","isVariantNode$1","inherit","isInitialAnimationBlocked","variantToSet","valueTarget","index","name","memberName","add","size","from","join"],"sources":["E:/Downloads/event-booking-site/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs"],"sourcesContent":["import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\nimport { getWillChangeName } from '../../value/use-will-change/get-will-change-name.mjs';\n\nfunction makeState({ applyWillChange = false, scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext, isStatic) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, isStatic ? false : applyWillChange, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext, isStatic);\n    return isStatic ? make() : useConstant(make);\n};\nfunction forEachDefinition(props, definition, callback) {\n    const list = Array.isArray(definition) ? definition : [definition];\n    for (let i = 0; i < list.length; i++) {\n        const resolved = resolveVariantFromProps(props, list[i]);\n        if (resolved) {\n            const { transitionEnd, transition, ...target } = resolved;\n            callback(target, transitionEnd);\n        }\n    }\n}\nfunction makeLatestValues(props, context, presenceContext, shouldApplyWillChange, scrapeMotionValues) {\n    var _a;\n    const values = {};\n    const willChange = new Set();\n    const applyWillChange = shouldApplyWillChange && ((_a = props.style) === null || _a === void 0 ? void 0 : _a.willChange) === undefined;\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        forEachDefinition(props, variantToSet, (target, transitionEnd) => {\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd) {\n                values[key] = transitionEnd[key];\n            }\n        });\n    }\n    // Add animating values to will-change\n    if (applyWillChange) {\n        if (animate && initial !== false && !isAnimationControls(animate)) {\n            forEachDefinition(props, animate, (target) => {\n                for (const name in target) {\n                    const memberName = getWillChangeName(name);\n                    if (memberName) {\n                        willChange.add(memberName);\n                    }\n                }\n            });\n        }\n        if (willChange.size) {\n            values.willChange = Array.from(willChange).join(\",\");\n        }\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,mBAAmB,QAAQ,iDAAiD;AACrF,SAASC,eAAe,QAAQ,mCAAmC;AACnE,SAASC,uBAAuB,QAAQ,yCAAyC;AACjF,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,kBAAkB,QAAQ,4CAA4C;AAC/E,SAASC,aAAa,QAAQ,uCAAuC;AACrE,SAASC,qBAAqB,EAAEC,aAAa,QAAQ,gDAAgD;AACrG,SAASC,iBAAiB,QAAQ,sDAAsD;AAExF,SAASC,SAASA,CAAC;EAAEC,eAAe,GAAG,KAAK;EAAEC,2BAA2B;EAAEC,iBAAiB;EAAEC;AAAS,CAAC,EAAEC,KAAK,EAAEC,OAAO,EAAEC,eAAe,EAAEC,QAAQ,EAAE;EACjJ,MAAMC,KAAK,GAAG;IACVC,YAAY,EAAEC,gBAAgB,CAACN,KAAK,EAAEC,OAAO,EAAEC,eAAe,EAAEC,QAAQ,GAAG,KAAK,GAAGP,eAAe,EAAEC,2BAA2B,CAAC;IAChIU,WAAW,EAAET,iBAAiB,CAAC;EACnC,CAAC;EACD,IAAIC,OAAO,EAAE;IACTK,KAAK,CAACI,KAAK,GAAIC,QAAQ,IAAKV,OAAO,CAACC,KAAK,EAAES,QAAQ,EAAEL,KAAK,CAAC;EAC/D;EACA,OAAOA,KAAK;AAChB;AACA,MAAMM,kBAAkB,GAAIC,MAAM,IAAK,CAACX,KAAK,EAAEG,QAAQ,KAAK;EACxD,MAAMF,OAAO,GAAGhB,UAAU,CAACM,aAAa,CAAC;EACzC,MAAMW,eAAe,GAAGjB,UAAU,CAACE,eAAe,CAAC;EACnD,MAAMyB,IAAI,GAAGA,CAAA,KAAMjB,SAAS,CAACgB,MAAM,EAAEX,KAAK,EAAEC,OAAO,EAAEC,eAAe,EAAEC,QAAQ,CAAC;EAC/E,OAAOA,QAAQ,GAAGS,IAAI,CAAC,CAAC,GAAGvB,WAAW,CAACuB,IAAI,CAAC;AAChD,CAAC;AACD,SAASC,iBAAiBA,CAACb,KAAK,EAAEc,UAAU,EAAEC,QAAQ,EAAE;EACpD,MAAMC,IAAI,GAAGC,KAAK,CAACC,OAAO,CAACJ,UAAU,CAAC,GAAGA,UAAU,GAAG,CAACA,UAAU,CAAC;EAClE,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IAClC,MAAME,QAAQ,GAAGjC,uBAAuB,CAACY,KAAK,EAAEgB,IAAI,CAACG,CAAC,CAAC,CAAC;IACxD,IAAIE,QAAQ,EAAE;MACV,MAAM;QAAEC,aAAa;QAAEC,UAAU;QAAE,GAAGC;MAAO,CAAC,GAAGH,QAAQ;MACzDN,QAAQ,CAACS,MAAM,EAAEF,aAAa,CAAC;IACnC;EACJ;AACJ;AACA,SAAShB,gBAAgBA,CAACN,KAAK,EAAEC,OAAO,EAAEC,eAAe,EAAEuB,qBAAqB,EAAEC,kBAAkB,EAAE;EAClG,IAAIC,EAAE;EACN,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMC,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;EAC5B,MAAMlC,eAAe,GAAG6B,qBAAqB,IAAI,CAAC,CAACE,EAAE,GAAG3B,KAAK,CAAC+B,KAAK,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,UAAU,MAAMG,SAAS;EACtI,MAAMC,YAAY,GAAGP,kBAAkB,CAAC1B,KAAK,EAAE,CAAC,CAAC,CAAC;EAClD,KAAK,MAAMkC,GAAG,IAAID,YAAY,EAAE;IAC5BL,MAAM,CAACM,GAAG,CAAC,GAAG5C,kBAAkB,CAAC2C,YAAY,CAACC,GAAG,CAAC,CAAC;EACvD;EACA,IAAI;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGpC,KAAK;EAChC,MAAMqC,uBAAuB,GAAG7C,qBAAqB,CAACQ,KAAK,CAAC;EAC5D,MAAMsC,eAAe,GAAG7C,aAAa,CAACO,KAAK,CAAC;EAC5C,IAAIC,OAAO,IACPqC,eAAe,IACf,CAACD,uBAAuB,IACxBrC,KAAK,CAACuC,OAAO,KAAK,KAAK,EAAE;IACzB,IAAIJ,OAAO,KAAKH,SAAS,EACrBG,OAAO,GAAGlC,OAAO,CAACkC,OAAO;IAC7B,IAAIC,OAAO,KAAKJ,SAAS,EACrBI,OAAO,GAAGnC,OAAO,CAACmC,OAAO;EACjC;EACA,IAAII,yBAAyB,GAAGtC,eAAe,GACzCA,eAAe,CAACiC,OAAO,KAAK,KAAK,GACjC,KAAK;EACXK,yBAAyB,GAAGA,yBAAyB,IAAIL,OAAO,KAAK,KAAK;EAC1E,MAAMM,YAAY,GAAGD,yBAAyB,GAAGJ,OAAO,GAAGD,OAAO;EAClE,IAAIM,YAAY,IACZ,OAAOA,YAAY,KAAK,SAAS,IACjC,CAACvD,mBAAmB,CAACuD,YAAY,CAAC,EAAE;IACpC5B,iBAAiB,CAACb,KAAK,EAAEyC,YAAY,EAAE,CAACjB,MAAM,EAAEF,aAAa,KAAK;MAC9D,KAAK,MAAMY,GAAG,IAAIV,MAAM,EAAE;QACtB,IAAIkB,WAAW,GAAGlB,MAAM,CAACU,GAAG,CAAC;QAC7B,IAAIjB,KAAK,CAACC,OAAO,CAACwB,WAAW,CAAC,EAAE;UAC5B;AACpB;AACA;AACA;UACoB,MAAMC,KAAK,GAAGH,yBAAyB,GACjCE,WAAW,CAACtB,MAAM,GAAG,CAAC,GACtB,CAAC;UACPsB,WAAW,GAAGA,WAAW,CAACC,KAAK,CAAC;QACpC;QACA,IAAID,WAAW,KAAK,IAAI,EAAE;UACtBd,MAAM,CAACM,GAAG,CAAC,GAAGQ,WAAW;QAC7B;MACJ;MACA,KAAK,MAAMR,GAAG,IAAIZ,aAAa,EAAE;QAC7BM,MAAM,CAACM,GAAG,CAAC,GAAGZ,aAAa,CAACY,GAAG,CAAC;MACpC;IACJ,CAAC,CAAC;EACN;EACA;EACA,IAAItC,eAAe,EAAE;IACjB,IAAIwC,OAAO,IAAID,OAAO,KAAK,KAAK,IAAI,CAACjD,mBAAmB,CAACkD,OAAO,CAAC,EAAE;MAC/DvB,iBAAiB,CAACb,KAAK,EAAEoC,OAAO,EAAGZ,MAAM,IAAK;QAC1C,KAAK,MAAMoB,IAAI,IAAIpB,MAAM,EAAE;UACvB,MAAMqB,UAAU,GAAGnD,iBAAiB,CAACkD,IAAI,CAAC;UAC1C,IAAIC,UAAU,EAAE;YACZhB,UAAU,CAACiB,GAAG,CAACD,UAAU,CAAC;UAC9B;QACJ;MACJ,CAAC,CAAC;IACN;IACA,IAAIhB,UAAU,CAACkB,IAAI,EAAE;MACjBnB,MAAM,CAACC,UAAU,GAAGZ,KAAK,CAAC+B,IAAI,CAACnB,UAAU,CAAC,CAACoB,IAAI,CAAC,GAAG,CAAC;IACxD;EACJ;EACA,OAAOrB,MAAM;AACjB;AAEA,SAASlB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}